[
  {
    "question": "Many user threads map to the same kernel thread. Kernel thread processes user threads in a preemptive 5ns time sliced window. The context switching time for the kernel thread is 2ns.\nGiven that there are 2 user processes, each of which needs to be processed for 12ns. Estimate the total time of finishing both the user process?",
    "options": [
      "24",
      "26",
      "32",
      "34"
    ],
    "answers": [
      3
    ]
  },
  {
    "question": "The update operation of a variable takes N unit of time. T threads update the variable at the same time. If data consistency is ensured, what will be the total time of above processing?",
    "options": [
      "N units",
      "N * T units",
      "T units",
      "N * T / 2 units"
    ],
    "answers": [
      1
    ]
  },
  {
    "question": "An array is split into 10 ranges and processed by 10 different threads. The sum of all array element have to be calculated. The following 2 approaches are followed: i) A global variable is used to store the final sum. Each thread adds each value, in its respective range, one by one to the global sum variable. ii) A global variable is used to store the final sum. Each thread evaluates the sum locally and finally adds it to the global sun variable. Compare the time complexity of the above 2 approaches.",
    "options": [
      "1 > 2",
      "2 > 1",
      "1 = 2",
      "It cannot be determined"
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "What is synchronization in reference to a thread?",
    "options": [
      "It’s a process of handling situations when two or more threads need access to a shared resource",
      "It’s a process by which many threads are able to access the same shared resource simultaneously",
      "It’s a process by which a method is able to access many different threads simultaneously",
      "It’s a method that allows too many threads to access any information they require"
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "Which method is called when a thread is blocked from running temporarily?",
    "options": [
      "a) Pulse()",
      "b) PulseAll()",
      "c) Wait()",
      "Both b & c"
    ],
    "answers": [
      2
    ]
  },
  {
    "question": "What kind of exception is being thrown if Wait(), Pulse() or PulseAll() is called from code that is not within synchronized code?",
    "options": [
      "System I/O Exception",
      "DivideByZero Exception",
      "SynchronizationLockException",
      "All of the mentioned"
    ],
    "answers": [
      2
    ]
  },
  {
    "question": "What is mutex?",
    "options": [
      "a mutually exclusive synchronization object",
      "can be acquired by more than one thread at a time",
      "helps in sharing of resource which can be used by one thread",
      "All of the mentioned"
    ],
    "answers": [
      0,
      2
    ]
  },
  {
    "question": "What is Semaphore?",
    "options": [
      "Grant more than one thread access to a shared resource at the same time",
      "Useful when a collection of resources is being synchronized",
      "Make use of a counter to control access to a shared resource"
    ],
    "answers": [
      0,
      1,
      2
    ]
  },
  {
    "question": "Which method is used to abort thread prior to it’s normal execution?",
    "options": [
      "sleep()",
      "terminate()",
      "suspend()",
      "Abort()"
    ],
    "answers": [
      3
    ]
  },
  {
    "question": "Which of these statements is incorrect?",
    "options": [
      "By multithreading CPU idle time is minimized, and we can take maximum use of it",
      "By multitasking CPU idle time is minimized, and we can take maximum use of it",
      "Two thread in Csharp can have same priority",
      "A thread can exist only in two states, running and blocked"
    ],
    "answers": [
      3
    ]
  },
  {
    "question": "What is multithreaded programming?",
    "options": [
      "It’s a process in which two different processes run simultaneously",
      "It’s a process in which two or more parts of same process run simultaneously",
      "It’s a process in which many different process are able to access same information",
      "It’s a process in which a single process can access information from many sources"
    ],
    "answers": [
      1
    ]
  },
  {
    "question": "Which of the following statements can provide the output \"11280\"?",
    "options": [
      "String str = \"PS11280\" System.out.println(str.substring(2, 4))",
      "String str = \"ZS112180\" System.out.println(str.substring(3, 5))",
      "String str = \"P\"; String strJ = \"J\"; String strK = \"2\"; System.out.println(str.length() + strJ.length() + strK + \"80\");",
      "String str = \"P\"; String strJ = \"J\"; String strK = \"2\"; System.out.println(str.length() + strJ.length() + \"280\");"
    ],
    "answers": []
  },
  {
    "question": "_______ is required for socket to wait for connection.",
    "options": [
      "server.wait()",
      "server.accept()",
      "server.wait(1000)",
      "server.join()"
    ],
    "answers": [
      -1
    ]
  },
  {
    "question": "You are implementing an operation on a processor. You need to ensure whether the operation is atomic or not. Which of the following methods will ensure its atomicity?",
    "options": [
      "One needs to ensure that if it is a single core processor, then the number of CPU instructions take to execute the operation is exactly equal to 1",
      "[Temp: False] If there is a multicore system, there is a need to device a method which ensure that there is a LOCK asserted on the bus that will prevent the simultaneous access of memory by any other processor apart from using a spinlock.",
      "If there is a multicore system, then there is a need to ensure that the operation takes exactly 1 CPU instruction to execute the operation while the interrupts are disabled.",
      "If the processor is single core, then disabling interrupts for some time can efficiently assure the whether the operation is atomic."
    ],
    "answers": []
  },
  {
    "question": "You want to implement a semaphore as a guard to a set of resources like database connections or dana pool. Which class would you used in Java to achieve this?",
    "options": [
      "java.util.concurrent.Executor",
      "java.util.concurrent.ExecutorService",
      "java.util.concurrent.Locks",
      "java.util.concurrent.Semaphore"
    ],
    "answers": [
      3
    ]
  },
  {
    "question": "You've implemented a synchronized method. Now you figure out that you will have to access this method with one more thread. To solve this problem you are trying to debug it. In your debugger window, you can see that one thread just accessed this method and it is not accessible anymore. When will this method be available again from the memory perspective for you to handle another thread?",
    "options": [
      "When running thread returns key of lock object on that method.",
      "When the new key will be generated in the memory.",
      "This method will never accessible by another thread.",
      "You have to re-run your application until other thread is lucky enough to get this job first."
    ],
    "answers": [
      2
    ]
  },
  {
    "question": "Choose the statements which differs the thread based multitasking and process based multitasking from each other.",
    "options": [
      "Process-based multitasking handles the concurrent execution of programs",
      "Process-based multitasking handles the concurrent execution of pieces of the same program",
      "Thread-based multitasking handles the concurrent execution of programs",
      "Thread-based multitasking deals with the concurrent execution of pieces of the same program"
    ],
    "answers": [
      0,
      3
    ]
  },
  {
    "question": "Which class from Collection increments or decrements its size and provides access by index to its elements and its methods are not synchronized ?",
    "options": [
      "java.util.ArrayList",
      "java.util.List",
      "java.util.HashSet",
      "java.util.Vector"
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "_______ injects resources for topic in JMS.",
    "options": [
      "@Resource(lookup = \"jms/ConnectionFactory\")",
      "@Resource(lookup = \"jms/Connection\")",
      "@Resource(lookup = \"jms/JmsConnectionFactor\")",
      "@Resource(lookup = \"jms/DataConnectionFactory\")"
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "The <PARAM> tag contains two attributes namely _____ and _____",
    "options": [
      "Name, Value",
      "Id, Value",
      "Param, Name",
      "None of the mentioned"
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "Which property in Stream implementation uses the default Fork/Join pool and allows to configure it's target concurrency?",
    "options": [
      "parallelism",
      "fork",
      "serializable",
      "parallel",
      "None of the mentioned"
    ],
    "answers": [
      -4
    ]
  },
  {
    "question": "What happens when SwingWorker task is not finished?",
    "options": [
      "It will invoke join method of Thread Class",
      "It will throw ConcurrentTaskException",
      "It will throw TimeoutException",
      "None of the mentioned"
    ],
    "answers": [
      2
    ]
  },
  {
    "question": "In a multithreading model, all process are blocked due to a blocking system call. Infer the type of model from the above scenario.",
    "options": [
      "Many-to-One",
      "One-to-One",
      "Both Choice 1 & 2",
      "Neither Choice 1 nor 2"
    ],
    "answers": []
  },
  {
    "question": "The client has requested that three methods of an instance must be used simultaneously to get better code performance. When a synchronized keyword is added to add the three methods, only one will be executed because it will take the key first. How to solve this problem?",
    "options": [
      "By calling synchronization.multiple() method on 2nd and 3rd methods.",
      "By creating a custom key object that will dictate the behavior of synchronization instead of using an implicit lock object.",
      "This is not achievable.",
      "Code should be refactored in the way that every method is in a separate class."
    ],
    "answers": []
  },
  {
    "question": "In java multi-threading, if you don't want to create a new thread and execute the code on the same calling thread, then which method should be called?",
    "options": [
      "Run()",
      "Start()",
      "Create()",
      "Both Choice 1 and Choice 2",
      "Both Choice 2 and Choice 3"
    ],
    "answers": [
      -1
    ]
  },
  {
    "question": "If a user inputs \"US 960\", what should be the output based on the below code?",
    "description": "Scanner scanner = new Scanner();\nString strNew;\nstrNew = scanner.next();\nSystem.out.print(strNew);",
    "options": [
      "US960",
      "US",
      "US 960",
      "The above code does not compile."
    ],
    "answers": [
      3
    ]
  },
  {
    "question": "What will be the output of below code snippet?",
    "description": "AtomicInteger atomicInteger = new AtomicInteger();\nSystem.out.println(atomicInteger);\natomicInteger.set(10);\nSystem.out.println(atomicInteger.getAndSet(22));\nSystem.out.println(atomicInteger.get());",
    "options": [
      "1,10,22",
      "0,10,22",
      "10,22",
      "NullPointerException at Line 2",
      "None of the mentioned"
    ],
    "answers": [
      1
    ]
  },
  {
    "question": "What will be the output of below code?",
    "description": "ArrayList myList = new ArrayList(5);\nint sum = 0;\nfor (int peg = 0; peg < 20; ++peg)\n  myList.add(peg, new Integer(peg));\nfor (int myPatch = 0; myPatch < 20; myPatch += 2)\n  sum += ((Integer) myList.get(myPatch)).intValue();\nSystem.out.println(sum);",
    "options": [
      "90",
      "210",
      "Runtime Exception",
      "Compilation Error"
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "A n * m matrix data is processed in a batch window of 2 * 2 and the sum of output of all batches is calculated. If instead of a using a single thread, the processing is parallelised using 4 threads, how much faster the entire program execute? Let processing time be: X, for single thread, Y, for 4 threads",
    "options": [
      "X = 4 * Y",
      "X > 4 * Y",
      "X < 4 * Y",
      "X = Y"
    ],
    "answers": []
  },
  {
    "question": "Given is a code snippet. This code snippet is expected to give a concurrency problem although it looks like a trivial synchronization example. Given are two statements that may ideally be the Reason and Solution or Workaround to this issue. Read the statements and mark the appropriate option. R: Strings are interned in JAVA. Hence, the literal string \"LOCK\" turns out to be the same instance of java.lang.String even though they are declared completely disparately from each other. S: private static final Object LOCK = new Object();",
    "description": "private static final String LOCK = \"LOCK\";\npublic dummy_module()\n{\n  synchronized(LOCK)\n  {\n    this.work();\n  }\n}",
    "options": [
      "R is the correct reason and S is a correct Workaround",
      "R is the correct reason and S is not a correct Workaround",
      "R is the incorrect reason and S is the correct Workaround",
      "R is the incorrect reason and S is the incorrect Workaround"
    ],
    "answers": [
      1
    ]
  },
  {
    "question": "I have group of employees. First I want to group them by the Employee ID. Then I want to further group those sets into same name employees together, which of the following code snippets will work fine?",
    "options": [
      "Map<Integer, List<String>> grouping = employees.stream().collect(Collectors.groupingBy(Employee::getEmployeeId, Collectors.mapping(Employee::getName, Collectors.toList())));",
      "Map<Integer, List<Employee>> m = employees.stream().collect(Collectors.groupingBy(Employee::getEmployeeId));",
      "Map<Integer, List<Employee>> m = employees.stream().collect(Collectors.groupingBy(Employee::getEmployeeId)).orderBy(Employee::getName);",
      "None of the mentioned"
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "How many threads can exist for each of the processes that occur in the program?",
    "options": [
      "atmost 1",
      "atleast 1",
      "only 1"
    ],
    "answers": [
      0,
      2
    ]
  },
  {
    "question": "You are working on the new project that was already in development process by another developers. Which method is implemented in the following code?",
    "description": "Runnable runnable = () -> {}",
    "options": [
      "run()",
      "start()",
      "execute()",
      "runnable()"
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "In which of the following system does the threads not share state, no concurrent data structures can be used and data processing stays within the same thread?",
    "options": [
      "a same-threaded system",
      "a multi-threaded system",
      "a singel threaded system",
      "All of the mentioned"
    ],
    "answers": []
  },
  {
    "question": "Analyze the given code and select the correct output in which MyThreads extends thread.",
    "description": "public class MyThread extends Thread\n{\n  public static void main(String[] args)\n  {\n    MyThread demo = new MyThread();\n    demoo.start();\n    System.out.print(\"First \");\n    demo.start();\n    System.out.print(\"Second \");\n  }\n  public void run()\n  {\n    System.out.print(\"Thread\");\n  }\n}",
    "options": [
      "Thread Second Thread First",
      "It will print \"First Thread\" and throw java.lang.IllegalThreadStateException",
      "Thread First Thread Second",
      "Cannot be determined"
    ],
    "answers": [
      1
    ]
  },
  {
    "question": "You are introducing the idea of concurrency to the client that would significantly improve his application performance. He would like to investigate it himself before you start implementing it. You mentioned the \"happens before link\" term, which he cannot find inside the Java documentation. Where should he look for it?",
    "options": [
      "It is Java Memory Model so it is part of the Java Language Specification",
      "He should look for it on forums available on Google.",
      "There is no available online information on it.",
      "It must be explained in the Java Documentation, he probably missed it."
    ],
    "answers": [
      -1
    ]
  },
  {
    "question": "Given are two statements S1 and S2. Read the two statements and mark the appropriate option.",
    "description": "S1: SimpleDateFormat class is not thread-safe\nS2: SimpleDateFormat stores intermediate results in instance fields",
    "options": [
      "S1 is correct. S2 is correct. S2 is the correct explanation of S1.",
      "S1 is correct. S2 is correct. S2 is not the correct explanation of S1.",
      "S1 is correct. S2 is incorrect.",
      "S1 is incorrect. S2 is correct."
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "A thread in a Multithreading Environment already has a non-recursive mutex associated with it. However, the thread which has already locked the mutex tries to lock the mutex again. Which of the following statements correctly depict the outcome of such an event?",
    "options": [
      "The thread gets locked again but a count is associated with the mutex. The thread has to be unlocked as many times as it has been locked by the mutex.",
      "The thread enters into the waiting list for the same mutex and the waiting time doesn't end because the thread is already locked by the same mutex. This results in a deadlock.",
      "The requesting thread is moved from the running list of processor to the waiting list of the synchronization primitive. Once the mutex is available, the thread with the highest priority according to the scheduling algorithms in the list gets locked by the mutex.",
      "The thread calls another mutex and gets associated with it too and thereby acquires an additional resource."
    ],
    "answers": [
      -2
    ]
  },
  {
    "question": "How is grouping function evaluated for Collection?",
    "options": [
      "Evaluated on basis of each stream element to Build groups based on equality of results",
      "Evaluated on basis of one stream element to Build groups based on dependency of results",
      "Evaluated on basis of each stream element to Build groups based on combination of results",
      "Evaluated on basis of each stream element to Build groups based on frequency of results"
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "What will be the output of this program?",
    "description": "public static void main(String[] args)\n{\n  BitSet objBitSet = new BitSet(8);\n  for (int i = 0; i < 8; i++)\n  objBitSet.set(i);\n  objBitSet.clear(4);\n  System.out.println(bitSetToInt(objBitSet));\n}\npublic static int bitSetToInt(BitSet bitSet) {\n  int bitInteger = 0;\n  for (int i = 0; i < 32; i++)\n    if (bitSet.get(i))\n      bitInteger |= (1 << i);\n  return bitInteger;\n}",
    "options": [
      "239",
      "249",
      "269",
      "349"
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "What will be the output of the program?",
    "description": "class ThreadExample\n{\n  public static void main(String[] args)\n  {\n    System.out.println(Thread.currentThread().getName());\n    for (int i = 0; i < 10; i++)\n    {\n      new Thread(\"\" + i)\n      {\n        public void run()\n        {\n          System.out.println(\"Thread: \" + getName() + \" running\");\n        }\n      }.start();\n    }\n  }\n}",
    "options": [
      "Compilation error: no start method",
      "Will print in this order: 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5...",
      "Will print in this order: 1 2 3 4 5 6... 1 2 3 4 5 6...",
      "Will print but not exactly in an order"
    ],
    "answers": [
      3
    ]
  },
  {
    "question": "The following declaration is not atomic in nature because the intermediate value can be read before the assignment is complete. Which of the following methods will make the declaration of variable foo_qux atomic in nature? (The OS being used is a 32 bit OS.)",
    "description": "double foo_qux = < value >;",
    "options": [
      "private volatile double foo_qux;",
      "public synchronized void setvariable(double value) { this.foo_qux = value; }",
      "public synchronized double getvariable() { return this.foo_qux; }",
      "private Atomicdouble foo_qux;"
    ],
    "answers": []
  },
  {
    "question": "What will be the output of below code snippet?",
    "description": "URLConnection connection = openConnection(\"http://www.essenor.com\");\nconnection.connect();\nSystem.out.println(\"You are connected to internet\");",
    "options": [
      "Prints \"You are connected to internet\"",
      "Compiletime Exception at Line 1",
      "Compiletime Exception at Line 2",
      "Code compiles fine but Throws Runtime Exception"
    ],
    "answers": [
      1
    ]
  },
  {
    "question": "Which of the above options can be used to market value from below code snippet?",
    "description": "<applet code=\"Stocks\" width=500 height=500>\n  <param name=Market value=\"NSE\">\n</applet>",
    "options": [
      "request.getParameter(\"Market\")",
      "AppletStub.getParameter(\"Market\")",
      "AppletStub.getParam(\"Market\")",
      "request.getParamm(\"Market\")",
      "None of the mentioned"
    ],
    "answers": [
      1
    ]
  },
  {
    "question": "Select correct option to create thread pool of fixed size.",
    "options": [
      "newFixedThreadPool(15);",
      "newThreadPool(15)",
      "newThread(5)",
      "newRunnable(15)"
    ],
    "answers": [
      0
    ]
  },
  {
    "question": "What is the advantage of multithreading programs?",
    "options": [
      "Enables to utilize the idle and executing time present in most programs",
      "Enables to utilize the idle time present in most programs",
      "Both a & b"
    ],
    "answers": [
      -1
    ]
  },
  {
    "question": "You have a method that is used by many threads. What are two ways you could prevent a race condition bug that other developers might possibly create.",
    "options": [
      "synchronized",
      "set thread ordering",
      "volatile",
      "modify thread.run to support many threads"
    ],
    "answers": [
      0,
      2
    ]
  },
  {
    "question": "How to log error when RMI Server or RMI Client fails?",
    "options": [
      "logLevel property",
      "logger property",
      "log4j property",
      "logEntry property",
      "None of the mentioned"
    ],
    "answers": [
      -2
    ]
  },
  {
    "question": "_______ is safe to collect into a HashMap.",
    "options": [
      "parallelStream()",
      "parallelHashMap()",
      "concurrentHashMap()",
      "None of the mentioned"
    ],
    "answers": [
      -3
    ]
  },
  {
    "question": "What will be the result of below code snippet?",
    "description": "byte[] a = {3, 2, 1};\nByte[] b = {4, 3, 2};\nSystem.out.println(Stream.of(a).count() + \",\" + Stream.of(b).count());",
    "options": [
      "1,1",
      "2,2",
      "3,3",
      "1,3"
    ],
    "answers": [
      3
    ]
  }
]
